%{
	@file: PD_2025_08_28_a.m
	@brief: Generate medium data for forward simulation using k-Wave for posterior shadow exploration.

	@date: [created: 2025-08-28, updated: 2025-08-30]
	@author: madpang
%}

% --- Helper functions ---
% Functional style subset extraction
fParen = @(x, varargin) x(varargin{:});

% Convert from temperature (Celsius degree) to sound speed (m/s)
% @todo: put this function into submodule madmat
fT2C = @(T) ...
	1.402385 * 10^3 + ...
	5.038813 * T - ...
	5.799136 * 10^(-2) * T.^2 + ...
	3.287156 * 10^(-4) * T.^3 - ...
	1.398845 * 10^(-6) * T.^4 + ...
	2.787860 * 10^(-9) * T.^5;

% --- Workspace ---
% @note: Assuming directory structure -- `<workspace-name>/src/<this-script>.m`
ws = fileparts(fileparts(mfilename('fullpath')));
wsPath = genpath(ws);
addpath(wsPath);
outputDir = fullfile(ws, 'data', '2025-08-28-a');
if ~exist(outputDir, 'dir')
	mkdir(outputDir);
end

% --- Parameters configuration ---
% Background sound speed [m/s]
c0 = fT2C(36.8);
% Background attenuation [dB/MHz/cm]
att0 = 0.4;
% Attenuation variation
att1 = 1.0; % medium high
att2 = 1.2; % high
% Background density [kg/m^3]
rho0 = 1000;
% Density variation
rho1 = 954; % low
rho2 = 1200; % high

% Number of simulation grid per dim.
gridNum = 2048;
% Grid spacing [m]
dx = 0.125e-3;
% Grid center coordinates [m]
centPos = dx/2 .* [-1, 1];
% Grid coordinates [x, y]
gridPos = RegularGrid( ...
	dx .* [1, 1], ...
	gridNum .* [1, 1], ...
	centPos ...
);

% --- Medium data generation ---
C_MAP = c0 .* ones(gridNum, gridNum);   % sound speed map (constant)
A_MAP = zeros(gridNum, gridNum);        % attenuation map
D_MAP = rho0 .* ones(gridNum, gridNum); % density map

% --- Mask 0: a radius 80 mm area of "breast", enclosing a radius-5 mm high attenuation region
mask0 = fP2P(transpose(gridPos), transpose(centPos)) <= 80e-3;

A_MAP(mask0) = 0.4; % [dB/MHz/cm]

nn = nnz(mask0);
ns = round(nn / 4);
D_MAP(mask0) = fParen( ...
	[ ...
		rho0 .* ones(1, nn - ns), ...
		rho1 .* ones(1, ns) ...
	], ...
	randperm(nn) ...
);
% @todo: refactor the above as a lambda function

% --- Mask 1: low echogenicity, w/ high attenuation (radius 5 mm)
mask1 = fP2P( ...
	transpose(gridPos), ...
	transpose(60e-3 .* [cos(-pi * 3/8), sin(-pi * 3/8)] + centPos) ...
) <= 5e-3;

A_MAP(mask1) = att1;

nn = nnz(mask1);
ns = round(nn / 20);
D_MAP(mask1) = fParen( ...
	[ ...
		rho0 .* ones(1, nn - ns), ...
		rho1 .* ones(1, ns) ...
	], ...
	randperm(nn) ...
);

% --- Mask 2: low echogenicity, w/ background attenuation (radius 5 mm)
mask2 = fP2P( ...
	transpose(gridPos), ...
	transpose(60e-3 .* [cos(pi * 5/8), sin(pi * 5/8)] + centPos) ...
) <= 5e-3;

A_MAP(mask2) = att0;

nn = nnz(mask2);
ns = round(nn / 20);
D_MAP(mask2) = fParen( ...
	[ ...
		rho0 .* ones(1, nn - ns), ...
		rho1 .* ones(1, ns) ...
	], ...
	randperm(nn) ...
);

% --- Mask 3: high echogenicity, w/ high attenuation, mimicking calcification spot (radius 5 mm)
mask3 = fP2P( ...
	transpose(gridPos), ...
	transpose(20e-3 .* [cos(-pi * 5/8), sin(-pi * 5/8)] + centPos) ...
) <= 2.5e-3;

A_MAP(mask3) = att2;

nn = nnz(mask3);
ns = round(nn / 2);
D_MAP(mask3) = fParen( ...
	[ ...
		rho0 .* ones(1, nn - ns), ...
		rho2 .* ones(1, ns) ...
	], ...
	randperm(nn) ...
);

% --- Mask 4: low echogenicity, w/ low attenuation, mimicking cyst (radius 10 mm)
mask4 = fP2P( ...
	transpose(gridPos), ...
	transpose(30e-3 .* [cos(pi * 3/8), sin(pi * 3/8)] + centPos) ...
) <= 10e-3;

A_MAP(mask4) = 0.0;

D_MAP(mask4) = rho1;

% --- Mask 5: low echogenicity, high attenuation, at center (radius 5 mm)
mask5 = fP2P(transpose(gridPos), transpose(centPos)) <= 5e-3;

A_MAP(mask5) = att1;

nn = nnz(mask5);
ns = round(nn / 20);
D_MAP(mask5) = fParen( ...
	[ ...
		rho0 .* ones(1, nn - ns), ...
		rho1 .* ones(1, ns) ...
	], ...
	randperm(nn) ...
);

%% Visualization
figure; imagesc(D_MAP); axis image; colorbar;
figure; imagesc(A_MAP); axis image; colorbar;
figure; imagesc(C_MAP); axis image; colorbar;
